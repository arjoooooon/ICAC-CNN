{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Arjun Taneja Plotting Timeseries","provenance":[],"collapsed_sections":[],"mount_file_id":"1r1-7tReNwWBf0J_W6F01PbhCY1ga89CU","authorship_tag":"ABX9TyMtETYBbxUZiIsdqxnATimJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Collecting Data from the AQS API\n","\n","This is a script to collect different ranges of time series data from the AQS API. You can specify the source and time range, and the function will give you back the results in a pandas dataset"],"metadata":{"id":"gBvCxpLTvJRc"}},{"cell_type":"code","execution_count":182,"metadata":{"id":"X65sJmxER5cj","executionInfo":{"status":"ok","timestamp":1651227479697,"user_tz":420,"elapsed":136,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import math\n","import requests\n","import json\n","\n","EMAIL='ataneja@g.hmc.edu'\n","KEY = 'carmelswift42'"]},{"cell_type":"markdown","source":["Some helper functions for API impelementation. These functions can retrieve data about states, counties, sites, as well as the codes that we need for querying the service."],"metadata":{"id":"eiSzY3Ri37z5"}},{"cell_type":"code","source":["def states():\n","  state_list = json.loads(requests.get(f'https://aqs.epa.gov/data/api/list/states?email={EMAIL}&key={KEY}').text)['Data']\n","  return pd.DataFrame(state_list)\n","\n","def counties_by_state(state_id):\n","  county_list = json.loads(requests.get(f'https://aqs.epa.gov/data/api/list/countiesByState?email={EMAIL}&key={KEY}&state={state_id}').text)['Data']\n","  return pd.DataFrame(county_list)\n","\n","def sites_by_county(state_id, county_id):\n","  site_list = json.loads(requests.get(f'https://aqs.epa.gov/data/api/list/sitesByCounty?email={EMAIL}&key={KEY}&state={state_id}&county={county_id}').text)\n","  try:\n","    return pd.DataFrame(site_list['Data'])\n","  except:\n","    print(site_list)\n","    return None\n","\n","def is_service_up():\n","  '''\n","  Returns True if the service is up\n","  '''\n","  availability = requests.get('https://aqs.epa.gov/data/api/metaData/isAvailable')\n","  availability = json.loads(availability.text)\n","\n","  status = availability['Header'][0]['status']\n","  return status[:38] == 'API service is up and running healthy.'\n","\n","def get_param_classes():\n","  param_classes = json.loads(requests.get(f'https://aqs.epa.gov/data/api/list/classes?email={EMAIL}&key={KEY}').text)['Data']\n","  return pd.DataFrame(param_classes)\n","\n","param_class_codes = get_param_classes()\n","\n","def get_param_codes(param_class):\n","  param_codes = json.loads(requests.get(f'https://aqs.epa.gov/data/api/list/parametersByClass?email={EMAIL}&key={KEY}&pc={param_class}').text)['Data']\n","  return pd.DataFrame(param_codes)\n","\n","state_codes = states()\n","\n","def get_state_id(state_name):\n","  row = state_codes.loc[state_codes['value_represented'] == state_name]\n","  return row.iloc[0]['code']\n","\n","def get_county_id(state_name, county_name):\n","  state_code = get_state_id(state_name)\n","  county_codes_for_state = counties_by_state(state_code)\n","  row = county_codes_for_state.loc[county_codes_for_state['value_represented'] == county_name]\n","  return row.iloc[0]['code']\n","\n","def get_site_id(state_name, county_name, site_name):\n","  state_code = get_state_id(state_name)\n","  county_code = get_county_id(state_name, county_name)\n","  site_codes_for_county = sites_by_county(state_code, county_code)\n","  row = site_codes_for_county.loc[site_codes_for_county['value_represented'] == site_name]\n","  return row.iloc[0]['code']"],"metadata":{"id":"aTvL1mRwvrud","executionInfo":{"status":"ok","timestamp":1651227480335,"user_tz":420,"elapsed":442,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}}},"execution_count":183,"outputs":[]},{"cell_type":"code","source":["# Querying the API to see what kind of data we have\n","\n","print(param_class_codes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2xlTzTqjE3ZH","executionInfo":{"status":"ok","timestamp":1651227480336,"user_tz":420,"elapsed":10,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}},"outputId":"e9f34d37-1755-428d-bd58-62094ec14f50"},"execution_count":184,"outputs":[{"output_type":"stream","name":"stdout","text":["                       code                                  value_represented\n","0               AIRNOW MAPS  The parameters represented on AirNow maps (881...\n","1                       ALL                    Select all Parameters Available\n","2            AQI POLLUTANTS                Pollutants that have an AQI Defined\n","3                 CORE_HAPS                         Urban Air Toxic Pollutants\n","4                  CRITERIA                                Criteria Pollutants\n","..                      ...                                                ...\n","22  SPECIATION CATION/ANION           PM2.5 Speciation Cation/Anion Parameters\n","23        SPECIATION METALS                  PM2.5 Speciation Metal Parameters\n","24           UATMP CARBONYL      Urban Air Toxics Monitoring Program Carbonyls\n","25                UATMP VOC           Urban Air Toxics Monitoring Program VOCs\n","26                      VOC                         Volatile organic compounds\n","\n","[27 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["print(get_param_codes('VOC'))\n","\n","def compound_by_county(state_id, county_id, param_id, start_date, end_date):\n","  data = json.loads(requests.get\\\n","                    (f'https://aqs.epa.gov/data/api/sampleData/byCounty?email={EMAIL}&key={KEY}&param={param_id}&bdate={start_date}&edate={end_date}&state={state_id}&county={county_id}').text)\n","  \n","  if data['Header'][0]['status'] == 'Failed':\n","    print(data)\n","    return None\n","\n","  return pd.DataFrame(data['Data'])\n","\n","def compound_by_site(state_id, county_id, site_id, param_id, start_date, end_date):\n","  data = json.loads(requests.get\\\n","                    (f'https://aqs.epa.gov/data/api/sampleData/bySite?email={EMAIL}&key={KEY}&param={param_id}&bdate={start_date}&edate={end_date}&state={state_id}&county={county_id}&site={site_id}').text\n","                    )\n","  \n","  if data['Header'][0]['status'] == 'Failed':\n","    print(data)\n","    return None\n","\n","  return pd.DataFrame(data['Data'])\n","\n","def convert_datetime(df):\n","  '''\n","  Helper function for converting the date_local and time_local columns of data returned from the API into pandas\n","  datetime objects. Takes in a DataFrame that must have columns 'date_local' and 'time_local', and returns a series containing\n","  datetime objects corresonding to the input dataframe. Keeps the rest of the columns the same\n","  '''\n","  time_conversion_aux = pd.DataFrame(data = {'year': df['date_local'].str[:4], 'month': df['date_local'].str[5:7],\n","                                           'day': df['date_local'].str[8:10], 'hour': df['time_local'].str[0:2],\n","                                           'minute': df['time_local'].str[3:5]})\n","  time_series = pd.to_datetime(time_conversion_aux)\n","  df.insert(0, 'timestamp', time_series, True)\n","  df = df.drop(['date_local', 'time_local'], axis='columns')\n","\n","  return df"],"metadata":{"id":"NVFMMshsIw_z","executionInfo":{"status":"ok","timestamp":1651227480549,"user_tz":420,"elapsed":219,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7f6ca8f0-6091-467c-daad-83b6186c840a"},"execution_count":185,"outputs":[{"output_type":"stream","name":"stdout","text":["      code                          value_represented\n","0    42153                           Carbon disulfide\n","1    43000               Sum of PAMS target compounds\n","2    43102  Total NMOC (non-methane organic compound)\n","3    43202                                     Ethane\n","4    43203                                   Ethylene\n","..     ...                                        ...\n","116  45807                        1,4-Dichlorobenzene\n","117  45809                            Benzyl chloride\n","118  45810                     1,2,4-Trichlorobenzene\n","119  45811                            2-chlorotoluene\n","120  46201                                1,4-Dioxane\n","\n","[121 rows x 2 columns]\n"]}]},{"cell_type":"markdown","source":["**Plotting timeseries**\n","\n","Now we have some data for Carbon Monoxide levels in Los Angeles, California for the first 5 days of January 2020. We can slice the resulting Dataframe, and attempt to plot the timeseries data\n","\n","*Reminder: You can slice away columns of a Dataframe by writing*\n","\n","```\n","df[df.columns[start:end]]\n","```\n","*or*\n","```\n","df[col_header]\n","```\n","\n"],"metadata":{"id":"whIEMDGwRH5o"}},{"cell_type":"code","source":["param_codes = get_param_codes('ALL')\n","#print(param_codes)\n","\n","pd.set_option(\"display.max_rows\", 10, \"display.max_columns\", None)\n","print(param_codes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-fZfmAMQb0Jr","executionInfo":{"status":"ok","timestamp":1651227480728,"user_tz":420,"elapsed":183,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}},"outputId":"934a3e92-c89d-4da6-bf5b-fa387b0d4e9e"},"execution_count":186,"outputs":[{"output_type":"stream","name":"stdout","text":["       code                       value_represented\n","0     11101             Suspended particulate (TSP)\n","1     11102          Suspended particulate (TSP) LC\n","2     11103          Benzene soluble organics (TSP)\n","3     11104          Total polynuclear hydrocarbons\n","4     11114                   Windblown particulate\n","...     ...                                     ...\n","1359  88500                 PM2.5 Total Atmospheric\n","1360  88501                          PM2.5 Raw Data\n","1361  88502  Acceptable PM2.5 AQI & Speciation Mass\n","1362  88503                  PM2.5 Volatile Channel\n","1363  92142                       Mercury compounds\n","\n","[1364 rows x 2 columns]\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"OimrV8fBeZ68","executionInfo":{"status":"ok","timestamp":1651227480729,"user_tz":420,"elapsed":5,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}}},"execution_count":186,"outputs":[]},{"cell_type":"code","source":["# Getting the relevant data from LA North Main St\n","# PM2.5, O3, NO, NO2, and NOX\n","# Hopefully we can get wind speed etc. so that we can model the data using a GNN\n","\n","pd.set_option(\"display.max_rows\", 20, \"display.max_columns\", None)\n","\n","param_id_dict = {\n","    'Ozone': 44201,\n","    'NO': 42605,\n","    'NO2': 42602,\n","    'NOx': 0,\n","}\n","\n","CA = get_state_id('California')\n","LA = get_county_id('California', 'Los Angeles')\n","LANSMT = get_site_id('California', 'Los Angeles', 'Los Angeles-North Main Street')\n","\n","START_YEAR = 2018\n","END_YEAR = 2022\n","\n","# We need to get around the api weirdness which only allows us to retrieve one year of dat\n"],"metadata":{"id":"N_XjO76h7JZ1","executionInfo":{"status":"ok","timestamp":1651227838426,"user_tz":420,"elapsed":636,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}}},"execution_count":193,"outputs":[]},{"cell_type":"code","source":["compounds_to_query = ['Ozone', 'NO2'] # We can extend this set later\n","\n","series_per_compound = {}\n","\n","ozone = pd.DataFrame(columns=['timestamp', 'sample_measurement', 'units_of_measure'])\n","for year in range(START_YEAR, END_YEAR):\n","  for compound in compounds_to_query:\n","    param_id = param_id_dict[compound]\n","    data = compound_by_site(CA, LA, LANSMT, param_id, str(year)+'0101', str(year)+'1231')\n","    #data = data[['date_local', 'time_local', 'sample_measurement', 'units_of_measure']]\n","\n","    # Why do I have to do this weird try-catch condition? I do not know. all I know is that it works for now\n","    try:\n","      data_compressed = data[['date_local', 'time_local', 'sample_measurement', 'units_of_measure']]\n","    except:\n","      pass\n","\n","    data_compressed_datetime = convert_datetime(data_compressed)\n","    \n","    if compound not in series_per_compound.keys():\n","      series_per_compound[compound] = data_compressed_datetime\n","    else:\n","      series_per_compound[compound] = pd.concat([series_per_compound[compound], data_compressed_datetime])\n","\n","# Now, we have to remove redundant timestamps, and then merge\n"],"metadata":{"id":"PkJ98Ye1k0N9","executionInfo":{"status":"ok","timestamp":1651227869289,"user_tz":420,"elapsed":29636,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}}},"execution_count":194,"outputs":[]},{"cell_type":"code","source":["grouped = {}\n","\n","for compound in compounds_to_query:\n","  grouped[compound] = series_per_compound[compound].groupby('timestamp').sum()\n","\n","datetime_series = grouped[compounds_to_query[0]].index # Ensure that we have a datetime column\n","\n","final_df = pd.DataFrame({'timestamp': datetime_series})\n","for compound in compounds_to_query:\n","  final_df.insert(1, compound, grouped[compound], True)\n"],"metadata":{"id":"waSJoxPWqij-","executionInfo":{"status":"ok","timestamp":1651227914955,"user_tz":420,"elapsed":223,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}}},"execution_count":195,"outputs":[]},{"cell_type":"code","source":["# Quick and easy plots\n","\n","PLOT_VALUE = 'NO2'\n","plot_df = final_df[['timestamp', PLOT_VALUE]]\n","\n","plot_df.groupby(plot_df[\"timestamp\"].dt.year)[PLOT_VALUE].mean().plot(\n","    kind='bar', rot=0, color='blue'\n",")\n","\n","plt.xlabel('Year')\n","plt.ylabel('Average ozone concentration (ppm)')\n","plt.title(f'Yearly tropospheric {PLOT_VALUE} levels')\n","plt.show()\n","\n","plot_df.groupby(plot_df['timestamp'].dt.hour)[PLOT_VALUE].mean().plot(kind='bar', rot=0, color='red')\n","plt.xlabel('Hour of the day (PT)')\n","plt.ylabel('Average ozone concentration (ppm)')\n","plt.title('Diurnal cycle for ozone–LA North Main Street')\n","plt.show()"],"metadata":{"id":"Q4FvtL7zV1HS","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1651227918247,"user_tz":420,"elapsed":645,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}},"outputId":"f75240db-0b1d-4b3b-8dd3-80951f8dd28c"},"execution_count":196,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Exporting Data to Google Drive\n","\n","We will export this Ozone data to a drive folder so we can create a model that naively extrapolates outwards. This is to set an example of what \"nonsense\" look like in machine learning."],"metadata":{"id":"3TS_YCNn798O"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive') # Ensuring drive is mounted\n","\n","FILEPATH = '/content/drive/My Drive/Atmospheric Chemistry Research/Ozone data/ozone.csv'\n","final_df.to_csv(FILEPATH)"],"metadata":{"id":"hTCEUxccXO8F","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1651228131344,"user_tz":420,"elapsed":1216,"user":{"displayName":"Arjun Taneja","userId":"02157655858403670343"}},"outputId":"292bdeca-8fc7-4129-91ad-43e2e3ccb3ff"},"execution_count":198,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":[""],"metadata":{"id":"OFc5_X4zK7D5"}}]}